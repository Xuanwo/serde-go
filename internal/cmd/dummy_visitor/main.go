package main

import (
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/Xuanwo/templateutils"
	"golang.org/x/tools/go/packages"
)

// map[StructName]map[ImplementedFunction]ture
var vis map[string]map[string]bool

func main() {
	cfg := &packages.Config{
		Mode:  packages.NeedName | packages.NeedFiles | packages.NeedSyntax | packages.NeedTypes | packages.NeedTypesInfo,
		Tests: true,
	}
	pkgs, err := packages.Load(cfg, ".")
	if err != nil {
		log.Fatalf("load: %v\n", err)
	}

	vis = make(map[string]map[string]bool)

	for _, pkg := range pkgs {
		for _, file := range pkg.GoFiles {
			if !strings.HasPrefix(filepath.Base(file), "de_") {
				continue
			}
			// Ignore generate files.
			if filepath.Base(file) == "de_dummy_visitor.go" {
				continue
			}

			log.Printf("read file: %s", file)
			content, err := ioutil.ReadFile(file)
			if err != nil {
				log.Fatalf("read file %s: %v", file, err)
			}

			source := &templateutils.Source{}
			err = source.ParseContent(file, content)
			if err != nil {
				log.Fatalf("parse file %s: %v", file, err)
			}

			for _, v := range source.Methods {
				// Ignore function without recv
				if v.Recv == nil {
					continue
				}
				// Ignore non-visitor functions
				if !strings.HasSuffix(v.Recv.Type, "Visitor") {
					continue
				}

				if _, ok := vis[v.Recv.Type]; !ok {
					vis[v.Recv.Type] = make(map[string]bool)
				}
				// Ignore non-visit functions
				if !strings.HasPrefix(v.Name, "Visit") && !strings.HasPrefix(v.Name, "String") {
					continue
				}

				vis[v.Recv.Type][v.Name] = true
			}
		}
	}

	f, err := os.OpenFile("de_dummy_visitor.go", os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0600)

	err = tmpl.Execute(f, vis)
	if err != nil {
		log.Fatalf("execute template: %v", err)
	}
}

var tmpl = template.Must(template.New("dummy_visitor").Funcs(
	template.FuncMap{
		"typeName": func(s string) string {
			return strings.ToLower(strings.TrimSuffix(s, "Visitor"))
		},
	},
).Parse(`// Code generated by internal/cmd/dummy_visitor; DO NOT EDIT.

package serde

{{- range $name, $funcs := . }}

{{- if not (index $funcs "String") }}
func (vi {{$name}}) String() string {
	return "{{ $name | typeName }}"
}
{{- end }}

{{- if not (index $funcs "VisitNil") }}
func (vi {{$name}}) VisitNil() (err error) {
	return NewInvalidTypeError(UnexpectedNil{}, vi)
}
{{- end }}

{{- if not (index $funcs "VisitBool") }}
func (vi {{$name}}) VisitBool(v bool) (err error) {
	return NewInvalidTypeError(UnexpectedBool(v), vi)
}
{{- end }}

{{- if not (index $funcs "VisitInt") }}
func (vi {{$name}}) VisitInt(v int) (err error) {
	return NewInvalidTypeError(UnexpectedInt(v), vi)
}
{{- end }}

{{- if not (index $funcs "VisitInt8") }}
func (vi {{$name}}) VisitInt8(v int8) (err error) {
	return NewInvalidTypeError(UnexpectedInt8(v), vi)
}
{{- end }}

{{- if not (index $funcs "VisitInt16") }}
func (vi {{$name}}) VisitInt16(v int16) (err error) {
	return NewInvalidTypeError(UnexpectedInt16(v), vi)
}
{{- end }}

{{- if not (index $funcs "VisitInt32") }}
func (vi {{$name}}) VisitInt32(v int32) (err error) {
	return NewInvalidTypeError(UnexpectedInt32(v), vi)
}
{{- end }}

{{- if not (index $funcs "VisitInt64") }}
func (vi {{$name}}) VisitInt64(v int64) (err error) {
	return NewInvalidTypeError(UnexpectedInt64(v), vi)
}
{{- end }}

{{- if not (index $funcs "VisitUint") }}
func (vi {{$name}}) VisitUint(v uint) (err error) {
	return NewInvalidTypeError(UnexpectedUint(v), vi)
}
{{- end }}

{{- if not (index $funcs "VisitUint8") }}
func (vi {{$name}}) VisitUint8(v uint8) (err error) {
	return NewInvalidTypeError(UnexpectedUint8(v), vi)
}
{{- end }}

{{- if not (index $funcs "VisitUint16") }}
func (vi {{$name}}) VisitUint16(v uint16) (err error) {
	return NewInvalidTypeError(UnexpectedUint16(v), vi)
}
{{- end }}

{{- if not (index $funcs "VisitUint32") }}
func (vi {{$name}}) VisitUint32(v uint32) (err error) {
	return NewInvalidTypeError(UnexpectedUint32(v), vi)
}
{{- end }}

{{- if not (index $funcs "VisitUint64") }}
func (vi {{$name}}) VisitUint64(v uint64) (err error) {
	return NewInvalidTypeError(UnexpectedUint64(v), vi)
}
{{- end }}

{{- if not (index $funcs "VisitFloat32") }}
func (vi {{$name}}) VisitFloat32(v float32) (err error) {
	return NewInvalidTypeError(UnexpectedFloat32(v), vi)
}
{{- end }}

{{- if not (index $funcs "VisitFloat64") }}
func (vi {{$name}}) VisitFloat64(v float64) (err error) {
	return NewInvalidTypeError(UnexpectedFloat64(v), vi)
}
{{- end }}

{{- if not (index $funcs "VisitComplex64") }}
func (vi {{$name}}) VisitComplex64(v complex64) (err error) {
	return NewInvalidTypeError(UnexpectedComplex64(v), vi)
}
{{- end }}

{{- if not (index $funcs "VisitComplex128") }}
func (vi {{$name}}) VisitComplex128(v complex128) (err error) {
	return NewInvalidTypeError(UnexpectedComplex128(v), vi)
}
{{- end }}

{{- if not (index $funcs "VisitRune") }}
func (vi {{$name}}) VisitRune(v rune) (err error) {
	return NewInvalidTypeError(UnexpectedRune(v), vi)
}
{{- end }}

{{- if not (index $funcs "VisitString") }}
func (vi {{$name}}) VisitString(v string) (err error) {
	return NewInvalidTypeError(UnexpectedString(v), vi)
}
{{- end }}

{{- if not (index $funcs "VisitByte") }}
func (vi {{$name}}) VisitByte(v byte) (err error) {
	return NewInvalidTypeError(UnexpectedByte(v), vi)
}
{{- end }}

{{- if not (index $funcs "VisitBytes") }}
func (vi {{$name}}) VisitBytes(v []byte) (err error) {
	return NewInvalidTypeError(UnexpectedBytes{}, vi)
}
{{- end }}

{{- if not (index $funcs "VisitSlice") }}
func (vi {{$name}}) VisitSlice(s SliceAccess) (err error) {
	return NewInvalidTypeError(UnexpectedSlice{}, vi)
}
{{- end }}

{{- if not (index $funcs "VisitMap") }}
func (vi {{$name}}) VisitMap(m MapAccess) (err error) {
	return NewInvalidTypeError(UnexpectedMap{}, vi)
}
{{- end }}
{{- end }}
`))
